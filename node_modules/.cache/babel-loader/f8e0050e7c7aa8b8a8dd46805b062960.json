{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils.js\");\nvar _placeholders = require(\"./placeholders.js\");\nconst defineType = (0, _utils.defineAliasedType)(\"Miscellaneous\");\n{\n  defineType(\"Noop\", {\n    visitor: []\n  });\n}\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    expectedNode: {\n      validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)\n    }\n  }\n});\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});","map":{"version":3,"sources":["../../src/definitions/misc.ts"],"names":["defineType","visitor","builder","fields","name","validate","expectedNode","PLACEHOLDERS"],"mappings":";;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAMA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA,MAAMA,UAAU,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAiB,EAAC,eAAe,CAAC;AAElB;EACjCA,UAAU,CAAC,MAAM,EAAE;IACjBC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ;AAEAD,UAAU,CAAC,aAAa,EAAE;EACxBC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,CAAC,cAAc,EAAE,MAAM,CAAC;EAEjCC,MAAM,EAAE;IACNC,IAAI,EAAE;MACJC,QAAQ,EAAE,CAAA,CAAA,EAAA,MAAA,CAAA,cAAc,EAAC,YAAY;IACvC,CAAC;IACDC,YAAY,EAAE;MACZD,QAAQ,EAAE,CAAA,CAAA,EAAA,MAAA,CAAA,WAAW,EAAC,GAAGE,aAAAA,CAAAA,YAAY;IACvC;EACF;AACF,CAAC,CAAC;AAEFP,UAAU,CAAC,uBAAuB,EAAE;EAClCE,OAAO,EAAE,CAAC,MAAM,CAAC;EACjBC,MAAM,EAAE;IACNC,IAAI,EAAE;MACJC,QAAQ,EAAE,CAAA,CAAA,EAAA,MAAA,CAAA,eAAe,EAAC,QAAQ;IACpC;EACF;AACF,CAAC,CAAC","sourcesContent":["import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils.ts\";\nimport { PLACEHOLDERS } from \"./placeholders.ts\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"script"}
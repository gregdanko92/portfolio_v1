{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = require(\"../generated/index.js\");\nvar _default = createTypeAnnotationBasedOnTypeof;\nexports.default = _default;\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  switch (type) {\n    case \"string\":\n      return (0, _index.stringTypeAnnotation)();\n    case \"number\":\n      return (0, _index.numberTypeAnnotation)();\n    case \"undefined\":\n      return (0, _index.voidTypeAnnotation)();\n    case \"boolean\":\n      return (0, _index.booleanTypeAnnotation)();\n    case \"function\":\n      return (0, _index.genericTypeAnnotation)((0, _index.identifier)(\"Function\"));\n    case \"object\":\n      return (0, _index.genericTypeAnnotation)((0, _index.identifier)(\"Object\"));\n    case \"symbol\":\n      return (0, _index.genericTypeAnnotation)((0, _index.identifier)(\"Symbol\"));\n    case \"bigint\":\n      return (0, _index.anyTypeAnnotation)();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}","map":{"version":3,"sources":["../../../src/builders/flow/createTypeAnnotationBasedOnTypeof.ts"],"names":["createTypeAnnotationBasedOnTypeof","exports","type","Error"],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAQ+B,IAAA,QAAA,GAGhBA,iCAAiCC;AAAAA,OAAAA,CAAAA,OAAAA,GAAAA,QAAAA;AAchD,SAASD,iCAAiCA,CAACE,IAAY,EAAc;EACnE,QAAQA,IAAI;IACV,KAAK,QAAQ;MACX,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAoB,EAAC,CAAC;IAC/B,KAAK,QAAQ;MACX,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAoB,EAAC,CAAC;IAC/B,KAAK,WAAW;MACd,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,kBAAkB,EAAC,CAAC;IAC7B,KAAK,SAAS;MACZ,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,qBAAqB,EAAC,CAAC;IAChC,KAAK,UAAU;MACb,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,qBAAqB,EAAC,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAAC,UAAU,CAAC,CAAC;IACtD,KAAK,QAAQ;MACX,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,qBAAqB,EAAC,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAAC,QAAQ,CAAC,CAAC;IACpD,KAAK,QAAQ;MACX,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,qBAAqB,EAAC,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAAC,QAAQ,CAAC,CAAC;IACpD,KAAK,QAAQ;MAGX,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAiB,EAAC,CAAC;EAC9B;EACA,MAAM,IAAIC,KAAK,CAAC,wBAAwB,GAAGD,IAAI,CAAC;AAClD","sourcesContent":["import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gatherSequenceExpressions;\nvar _getBindingIdentifiers = require(\"../retrievers/getBindingIdentifiers.js\");\nvar _index = require(\"../validators/generated/index.js\");\nvar _index2 = require(\"../builders/generated/index.js\");\nvar _cloneNode = require(\"../clone/cloneNode.js\");\nfunction gatherSequenceExpressions(nodes, scope, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n  for (const node of nodes) {\n    if (!(0, _index.isEmptyStatement)(node)) {\n      ensureLastUndefined = false;\n    }\n    if ((0, _index.isExpression)(node)) {\n      exprs.push(node);\n    } else if ((0, _index.isExpressionStatement)(node)) {\n      exprs.push(node.expression);\n    } else if ((0, _index.isVariableDeclaration)(node)) {\n      if (node.kind !== \"var\") return;\n      for (const declar of node.declarations) {\n        const bindings = (0, _getBindingIdentifiers.default)(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: (0, _cloneNode.default)(bindings[key])\n          });\n        }\n        if (declar.init) {\n          exprs.push((0, _index2.assignmentExpression)(\"=\", declar.id, declar.init));\n        }\n      }\n      ensureLastUndefined = true;\n    } else if ((0, _index.isIfStatement)(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return;\n      exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));\n    } else if ((0, _index.isBlockStatement)(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if ((0, _index.isEmptyStatement)(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return (0, _index2.sequenceExpression)(exprs);\n  }\n}","map":{"version":3,"sources":["../../src/converters/gatherSequenceExpressions.ts"],"names":["gatherSequenceExpressions","nodes","scope","declars","exprs","ensureLastUndefined","node","push","expression","kind","declar","declarations","bindings","key","Object","keys","id","init","consequent","buildUndefinedNode","alternate","test","body","indexOf","length"],"mappings":"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","sourcesContent":["import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport {\n  isExpression,\n  isExpressionStatement,\n  isVariableDeclaration,\n  isIfStatement,\n  isBlockStatement,\n  isEmptyStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  sequenceExpression,\n  assignmentExpression,\n  conditionalExpression,\n} from \"../builders/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport type * as t from \"../index.ts\";\nimport type { Scope } from \"@babel/traverse\";\n\nexport type DeclarationInfo = {\n  kind: t.VariableDeclaration[\"kind\"];\n  id: t.Identifier;\n};\n\nexport default function gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  scope: Scope,\n  declars: Array<DeclarationInfo>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: cloneNode(bindings[key]),\n          });\n        }\n\n        if (declar.init) {\n          exprs.push(assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], scope, declars)\n        : scope.buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], scope, declars)\n        : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
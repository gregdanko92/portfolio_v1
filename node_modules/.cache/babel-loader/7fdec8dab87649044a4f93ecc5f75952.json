{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils.js\");\nconst defineType = (0, _utils.defineAliasedType)(\"JSX\");\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXElement\", \"JSXFragment\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    }\n  }\n});\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: Object.assign({\n    openingElement: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }, {\n    selfClosing: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"JSXEmptyExpression\", {});\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"JSXEmptyExpression\")\n    }\n  }\n});\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningFragment\")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXClosingFragment\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }\n});\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"]\n});\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"]\n});","map":{"version":3,"sources":["../../src/definitions/jsx.ts"],"names":["defineType","visitor","aliases","fields","name","validate","value","optional","builder","openingElement","closingElement","children","selfClosing","expression","object","property","namespace","default","attributes","typeParameters","argument","openingFragment","closingFragment"],"mappings":"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","sourcesContent":["import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n"]},"metadata":{},"sourceType":"script"}
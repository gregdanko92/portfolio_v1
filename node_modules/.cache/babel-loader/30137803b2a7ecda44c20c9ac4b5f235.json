{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = require(\"../validators/generated/index.js\");\nvar _default = toExpression;\nexports.default = _default;\nfunction toExpression(node) {\n  if ((0, _index.isExpressionStatement)(node)) {\n    node = node.expression;\n  }\n  if ((0, _index.isExpression)(node)) {\n    return node;\n  }\n  if ((0, _index.isClass)(node)) {\n    node.type = \"ClassExpression\";\n  } else if ((0, _index.isFunction)(node)) {\n    node.type = \"FunctionExpression\";\n  }\n  if (!(0, _index.isExpression)(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n  return node;\n}","map":{"version":3,"sources":["../../src/converters/toExpression.ts"],"names":["toExpression","exports","node","expression","type","Error"],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;AAK0C,IAAA,QAAA,GAG3BA,YAAYC;AAAAA,OAAAA,CAAAA,OAAAA,GAAAA,QAAAA;AAQ3B,SAASD,YAAYA,CACnBE,IAAiE,EACnD;EACd,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,qBAAqB,EAACA,IAAI,CAAC,EAAE;IAC/BA,IAAI,GAAGA,IAAI,CAACC,UAAU;EACxB;EAQA,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,YAAY,EAACD,IAAI,CAAC,EAAE;IACtB,OAAOA,IAAI;EACb;EAKA,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,OAAO,EAACA,IAAI,CAAC,EAAE;IAEjBA,IAAI,CAACE,IAAI,GAAG,iBAAiB;EAC/B,CAAC,MAAM,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAACF,IAAI,CAAC,EAAE;IAE3BA,IAAI,CAACE,IAAI,GAAG,oBAAoB;EAClC;EAGA,IAAI,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,YAAY,EAACF,IAAI,CAAC,EAAE;IACvB,MAAM,IAAIG,KAAK,CAAE,eAAcH,IAAI,CAACE,IAAK,mBAAkB,CAAC;EAC9D;EAEA,OAAOF,IAAI;AACb","sourcesContent":["import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n"]},"metadata":{},"sourceType":"script"}
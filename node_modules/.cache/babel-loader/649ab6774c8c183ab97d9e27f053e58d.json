{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toBlock;\nvar _index = require(\"../validators/generated/index.js\");\nvar _index2 = require(\"../builders/generated/index.js\");\nfunction toBlock(node, parent) {\n  if ((0, _index.isBlockStatement)(node)) {\n    return node;\n  }\n  let blockNodes = [];\n  if ((0, _index.isEmptyStatement)(node)) {\n    blockNodes = [];\n  } else {\n    if (!(0, _index.isStatement)(node)) {\n      if ((0, _index.isFunction)(parent)) {\n        node = (0, _index2.returnStatement)(node);\n      } else {\n        node = (0, _index2.expressionStatement)(node);\n      }\n    }\n    blockNodes = [node];\n  }\n  return (0, _index2.blockStatement)(blockNodes);\n}","map":{"version":3,"sources":["../../src/converters/toBlock.ts"],"names":["toBlock","node","parent","blockNodes"],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;AAMA,IAAA,OAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AAOe,SAASA,OAAOA,CAC7BC,IAAgC,EAChCC,MAAe,EACG;EAClB,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,gBAAgB,EAACD,IAAI,CAAC,EAAE;IAC1B,OAAOA,IAAI;EACb;EAEA,IAAIE,UAAyB,GAAG,EAAE;EAElC,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,gBAAgB,EAACF,IAAI,CAAC,EAAE;IAC1BE,UAAU,GAAG,EAAE;EACjB,CAAC,MAAM;IACL,IAAI,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,WAAW,EAACF,IAAI,CAAC,EAAE;MACtB,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAACC,MAAM,CAAC,EAAE;QACtBD,IAAI,GAAG,CAAA,CAAA,EAAA,OAAA,CAAA,eAAe,EAACA,IAAI,CAAC;MAC9B,CAAC,MAAM;QACLA,IAAI,GAAG,CAAA,CAAA,EAAA,OAAA,CAAA,mBAAmB,EAACA,IAAI,CAAC;MAClC;IACF;IAEAE,UAAU,GAAG,CAACF,IAAI,CAAC;EACrB;EAEA,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,cAAc,EAACE,UAAU,CAAC;AACnC","sourcesContent":["import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n"]},"metadata":{},"sourceType":"script"}
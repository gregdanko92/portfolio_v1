{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildChildren;\nvar _index = require(\"../../validators/generated/index.js\");\nvar _cleanJSXElementLiteralChild = require(\"../../utils/react/cleanJSXElementLiteralChild.js\");\nfunction buildChildren(node) {\n  const elements = [];\n  for (let i = 0; i < node.children.length; i++) {\n    let child = node.children[i];\n    if ((0, _index.isJSXText)(child)) {\n      (0, _cleanJSXElementLiteralChild.default)(child, elements);\n      continue;\n    }\n    if ((0, _index.isJSXExpressionContainer)(child)) child = child.expression;\n    if ((0, _index.isJSXEmptyExpression)(child)) continue;\n    elements.push(child);\n  }\n  return elements;\n}","map":{"version":3,"sources":["../../../src/builders/react/buildChildren.ts"],"names":["buildChildren","node","elements","i","children","length","child","expression","push"],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;AAKA,IAAA,4BAAA,GAAA,OAAA,CAAA,kDAAA,CAAA;AASe,SAASA,aAAaA,CACnCC,IAAkC,EACjB;EACjB,MAAMC,QAAQ,GAAG,EAAE;EAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,QAAQ,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC7C,IAAIG,KAAU,GAAGL,IAAI,CAACG,QAAQ,CAACD,CAAC,CAAC;IAEjC,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,SAAS,EAACG,KAAK,CAAC,EAAE;MACpB,CAAA,CAAA,EAAA,4BAAA,CAAA,OAA2B,EAACA,KAAK,EAAEJ,QAAQ,CAAC;MAC5C;IACF;IAEA,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,wBAAwB,EAACI,KAAK,CAAC,EAAEA,KAAK,GAAGA,KAAK,CAACC,UAAU;IAC7D,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAoB,EAACD,KAAK,CAAC,EAAE;IAEjCJ,QAAQ,CAACM,IAAI,CAACF,KAAK,CAAC;EACtB;EAEA,OAAOJ,QAAQ;AACjB","sourcesContent":["import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated/index.ts\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild.ts\";\nimport type * as t from \"../../index.ts\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n"]},"metadata":{},"sourceType":"script"}